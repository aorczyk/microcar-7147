{"entries":[{"timestamp":1759568924557,"editorVersion":"7.1.47","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":474,"diffs":[[1,""]]},{"start1":1,"length1":9120,"diffs":[[1,""]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":100,"length1":109,"diffs":[[1,"        \"radio\": \"*\",\n        \"microphone\": \"*\"\n"]]},{"start1":294,"length1":254,"diffs":[[1,"    \"additionalFilePaths\": []\n"]]}]}]},{"timestamp":1759569160216,"editorVersion":"7.1.47","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":474,"length1":8,"diffs":[[1,"\n"]]}]}]},{"timestamp":1759569740439,"editorVersion":"7.1.47","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":474,"length1":28,"diffs":[[1,"let max\n"]]},{"start1":1091,"length1":194,"diffs":[[1,"            bluetooth.uartWriteLine('vc;sr;1;-60;60;10;0;0;0;;')\n            bluetooth.uartWriteLine('vc;jrx;-60;60;10;0;0;')\n"]]},{"start1":2443,"length1":103,"diffs":[[1,"            bluetooth.uartWriteLine('vc;ox;1;-30;30;-60;60;10;0;0;')\n"]]},{"start1":7452,"length1":91,"diffs":[[1,"    bluetooth.uartWriteLine('vc;sr;1;-60;60;10;0;0;0;;')\n"]]}]}]},{"timestamp":1759570044802,"editorVersion":"7.1.47","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":4157,"length1":0,"diffs":[[1,"            if (mode == 0) {\n"]]}]}]},{"timestamp":1759644022156,"editorVersion":"7.1.47","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":4157,"length1":29,"diffs":[[1,""]]}]}]},{"timestamp":1759644028308,"editorVersion":"7.1.47","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":51,"length1":0,"diffs":[[1,"music.setVolume(20) // 127\nlet mode = 0;\nlet lastSrValue = 0;\nbasic.clearScreen()\n"]]},{"start1":502,"length1":47,"diffs":[[1,""]]},{"start1":3252,"length1":54,"diffs":[[1,""]]},{"start1":3671,"length1":58,"diffs":[[1,""]]},{"start1":3785,"length1":58,"diffs":[[1,""]]},{"start1":4157,"length1":190,"diffs":[[1,"            if (mode == 0) {\n                // if (value >= 120 && value <= 240) {\n                if (value >= 90 && value <= 270) {\n                    wuKong.setServoAngle(wuKong.ServoTypeList._360, wuKong.ServoList.S0, value)\n                }\n            } else if (mode == 1) {\n                if (value >= 100 && value <= 260) {\n                    lastSrValue = commandValue\n                    wuKong.setServoAngle(wuKong.ServoTypeList._360, wuKong.ServoList.S7, value)\n                }\n"]]},{"start1":5792,"length1":82,"diffs":[[1,""]]}]}]},{"timestamp":1759644538739,"editorVersion":"7.1.47","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":637,"length1":272,"diffs":[[1,""]]},{"start1":5619,"length1":79,"diffs":[[1,"        } else if (commandName == \"prop\") {\n            let params = commandValue\n"]]},{"start1":5742,"length1":0,"diffs":[[1,"\n"]]},{"start1":7618,"length1":0,"diffs":[[1,"bluetooth.onUartDataReceived(serial.delimiters(Delimiters.NewLine), function () {\n    let command = bluetooth.uartReadUntil(serial.delimiters(Delimiters.NewLine))\n    let commadParts = command.split(\"=\")\n\n    latestCommands[commadParts[0]] = parseFloat(commadParts[1])\n})\n\n"]]}]}]},{"timestamp":1759645074665,"editorVersion":"7.1.47","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":420,"length1":27,"diffs":[[1,"music.setVolume(50) // 127\n"]]},{"start1":5041,"length1":54,"diffs":[[1,""]]},{"start1":5116,"length1":54,"diffs":[[1,""]]},{"start1":5191,"length1":54,"diffs":[[1,""]]}]}]},{"timestamp":1759645550891,"editorVersion":"7.1.47","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":5008,"length1":30,"diffs":[[1,"            setBrightness(20, 4)\n            bluetooth.uartWriteLine('setProp;mc_l;1')\n"]]},{"start1":5136,"length1":31,"diffs":[[1,"            setBrightness(100, 7)\n            bluetooth.uartWriteLine('setProp;mc_l;2')\n"]]},{"start1":5265,"length1":31,"diffs":[[1,"            setBrightness(255, 8)\n            bluetooth.uartWriteLine('setProp;mc_l;3')\n"]]},{"start1":8824,"length1":45,"diffs":[[1,"function setBrightness(brightness: number, buttonNr: number) {\n"]]},{"start1":9000,"length1":60,"diffs":[[1,""]]},{"start1":9197,"length1":61,"diffs":[[1,"            bluetooth.uartWriteLine(`vc;b;${buttonBrightness[lightsBrightnessLevel]};1;0;`)\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":277,"length1":44,"diffs":[[1,""]]}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"},{"type":"added","filename":"main.blocks","value":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>"}]}],"snapshots":[{"timestamp":1759568924556,"editorVersion":"7.1.47","text":{"main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"micro:car 7.1.47\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"languageRestriction\": \"javascript-only\",\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1759644022156,"editorVersion":"7.1.47","text":{"main.ts":"let latestCommands: { [key: string]: number } = {}\nmusic.setVolume(20) // 127\nlet mode = 0;\nlet lastSrValue = 0;\nbasic.clearScreen()\nlet lightsOn = false;\nlet lightsBrightness = false;\nlet lightsBrightnessLevel = 0;\nlet strip = neopixel.create(DigitalPin.P16, 4, NeoPixelMode.RGB)\nlet acc: number[];\nlet alarmActive = false;\nlet oyEnabled = false;\nlet maxLiftAngle = 320;\nlet minLiftAngle = 230;\nlet liftPressed = false;\nlet liftAngle = minLiftAngle;\nlet liftAngleStep = 1;\nlet maxSteeringAngle = 90;\n\nstrip.setBrightness(20)\n\nbluetooth.startUartService()\n\nbluetooth.onBluetoothConnected(function () {\n})\n\nbluetooth.onBluetoothDisconnected(function () {\n    stopAll()\n})\n\nbasic.forever(function () {\n    while (Object.keys(latestCommands).length) {\n        let commandName = Object.keys(latestCommands)[0]\n        let commandValue = latestCommands[commandName]\n        delete latestCommands[commandName];\n\n        if (commandName == \"-v\") {\n            bluetooth.uartWriteLine('vc;import_start;')\n            bluetooth.uartWriteLine('vc;init;')\n            bluetooth.uartWriteLine('vc;sl;1;-100;100;5;1;0;1;;')\n            bluetooth.uartWriteLine(`vc;sr;1;-${maxSteeringAngle};${maxSteeringAngle};10;0;0;0;;`)\n            bluetooth.uartWriteLine(`vc;jrx;-${maxSteeringAngle};${maxSteeringAngle};10;0;0;`)\n            bluetooth.uartWriteLine('vc;jry;-100;100;5;1;0;')\n            bluetooth.uartWriteLine('vc;b;w;1;0;<i class=\"fa-solid fa-arrows-up-down\"></i>;')\n            bluetooth.uartWriteLine('vc;b;a;0;0;A;')\n            bluetooth.uartWriteLine('vc;b;d;0;0;D;')\n            bluetooth.uartWriteLine('vc;b;s;0;0;S;')\n            bluetooth.uartWriteLine('vc;b;2;0;')\n            bluetooth.uartWriteLine('vc;b;3;0;')\n            bluetooth.uartWriteLine('vc;b;up;1;2;<i class=\"fa-solid fa-arrow-up\"></i>;')\n            bluetooth.uartWriteLine('vc;b;left;0;0;<i class=\"fa-solid fa-arrow-left\"></i>;')\n            bluetooth.uartWriteLine('vc;b;right;0;0;<i class=\"fa-solid fa-arrow-right\"></i>;')\n            bluetooth.uartWriteLine('vc;b;down;1;2;<i class=\"fa-solid fa-arrow-down\"></i>;')\n            bluetooth.uartWriteLine('vc;b;1;1;4;<i class=\"fa-solid fa-volume-high\"></i>;')\n            bluetooth.uartWriteLine('vc;b;2;1;1;<i class=\"fa-solid fa-lock-open\"></i>;')\n            bluetooth.uartWriteLine('vc;b;4;1;0;<i class=\"fa-regular fa-lightbulb\"></i>;')\n            bluetooth.uartWriteLine('vc;b;7;1;0;<i class=\"fa-solid fa-lightbulb\"></i>;')\n            bluetooth.uartWriteLine('vc;b;8;1;0;<i class=\"fa-solid fa-sun\"></i>;')\n            bluetooth.uartWriteLine(`vc;ox;1;-30;30;-${maxSteeringAngle};${maxSteeringAngle};10;0;0;`)\n            bluetooth.uartWriteLine('vc;oy;1;-30;30;-100;100;5;0;0;')\n            bluetooth.uartWriteLine('vc;show;sl,sr,jr,al,ar,br,bl;')\n            bluetooth.uartWriteLine('vc;il;1;')\n            bluetooth.uartWriteLine('vc;ir;1;')\n\n            stopAll()\n\n            if (!alarmActive) {\n                bluetooth.uartWriteLine('vc;b;2;1;1;<i class=\"fa-solid fa-lock-open\"></i>;')\n            } else {\n                bluetooth.uartWriteLine('vc;b;2;1;4;<i class=\"fa-solid fa-lock\"></i>;')\n            }\n\n            bluetooth.uartWriteLine('vc;m;micro:car;')\n            bluetooth.uartWriteLine('vc;import_end;')\n\n            wuKong.setServoAngle(wuKong.ServoTypeList._360, wuKong.ServoList.S3, liftAngle)\n        } else if (commandName == \"STOP\" || commandName == \"PLAY_DONE\") {\n            stopAll()\n        } else if (commandName == \"2\") {\n            alarmActive = !alarmActive\n            if (alarmActive) {\n                activateAlarm()\n                bluetooth.uartWriteLine('vc;b;2;1;4;<i class=\"fa-solid fa-lock\"></i>;')\n            } else {\n                bluetooth.uartWriteLine('vc;b;2;1;1;<i class=\"fa-solid fa-lock-open\"></i>;')\n            }\n        } else if (alarmActive) {\n            return\n        } else if ((oyEnabled && commandName == \"oy\") || commandName == \"sl\" || commandName == \"jry\") {\n            wuKong.setServoSpeed(wuKong.ServoList.S7, commandValue)\n        } else if (commandName == \"ox\" || commandName == \"sr\" || commandName == \"jrx\") {\n            let value = commandValue + 180;\n            if (mode == 0) {\n                // if (value >= 120 && value <= 240) {\n                if (value >= 90 && value <= 270) {\n                    wuKong.setServoAngle(wuKong.ServoTypeList._360, wuKong.ServoList.S0, value)\n                }\n            } else if (mode == 1) {\n                if (value >= 100 && value <= 260) {\n                    lastSrValue = commandValue\n                    wuKong.setServoAngle(wuKong.ServoTypeList._360, wuKong.ServoList.S7, value)\n                }\n            }\n        } else if (commandName == \"1\") {\n            // Horn on\n            music.ringTone(Note.C)\n        } else if (commandName == \"!1\") {\n            // Horn off\n            music.stopAllSounds()\n        } else if (commandName == \"4\") {\n            setBrightness(20, 4)\n        } else if (commandName == \"7\") {\n            setBrightness(100, 7)\n        } else if (commandName == \"8\") {\n            setBrightness(255, 8)\n        } else if (commandName == \"w\") {\n            oyEnabled = true\n        } else if (commandName == \"!w\") {\n            oyEnabled = false\n            wuKong.setServoSpeed(wuKong.ServoList.S7, 0)\n        } else if (commandName == \"up\" && !liftPressed) {\n            liftPressed = true\n            control.inBackground(() => {\n                turnLift(-1)\n            })\n        } else if (commandName == \"!up\") {\n            liftPressed = false\n        } else if (commandName == \"down\" && !liftPressed) {\n            liftPressed = true\n            control.inBackground(() => {\n                turnLift(1)\n            })\n        } else if (commandName == \"!down\") {\n            liftPressed = false\n        }\n    }\n\n    basic.pause(20)\n})\n\n\nfunction activateAlarm() {\n    let sensitiveness = [\n        100,\n        100,\n        120\n    ];\n\n    stopAll()\n\n    alarmActive = true;\n\n    acc = [\n        input.acceleration(Dimension.X),\n        input.acceleration(Dimension.Y),\n        input.acceleration(Dimension.Z)\n    ]\n\n    control.inBackground(() => {\n        while (alarmActive) {\n            let accTest = [\n                input.acceleration(Dimension.X),\n                input.acceleration(Dimension.Y),\n                input.acceleration(Dimension.Z)\n            ]\n\n            let test = false;\n\n            for (let n = 0; n < 3; n++) {\n                if (Math.abs(accTest[n] - acc[n]) > sensitiveness[n]) {\n                    test = true;\n                    break;\n                }\n            }\n\n            if (test) {\n                runAlarm()\n                break;\n            }\n\n            basic.pause(50)\n        }\n    })\n}\n\nfunction runAlarm() {\n    control.inBackground(() => {\n        let time = input.runningTime()\n\n        while (alarmActive && (input.runningTime() - time < 3000)) {\n            music.ringTone(Note.C)\n            // setLeds(20)\n\n            basic.pause(200)\n\n            music.stopAllSounds()\n            // setLeds(0)\n\n            basic.pause(200)\n        }\n\n        if (alarmActive) {\n            activateAlarm()\n        }\n    })\n}\n\nfunction stopAll() {\n    wuKong.setServoSpeed(wuKong.ServoList.S7, 0)\n    wuKong.setServoAngle(wuKong.ServoTypeList._360, wuKong.ServoList.S0, 180)\n    music.stopAllSounds()\n    lightsOn = false\n    lightsBrightness = false\n    lightsBrightnessLevel = 0;\n    setLeds(0)\n\n    bluetooth.uartWriteLine('vc;b;4;1;0;')\n    bluetooth.uartWriteLine('vc;b;7;1;0;')\n    bluetooth.uartWriteLine('vc;b;8;1;0;')\n    bluetooth.uartWriteLine(`vc;sr;1;-${maxSteeringAngle};${maxSteeringAngle};10;0;0;0;;`)\n    bluetooth.uartWriteLine('vc;srv;0;')\n}\n\nbluetooth.onUartDataReceived(serial.delimiters(Delimiters.NewLine), function () {\n    let command = bluetooth.uartReadUntil(serial.delimiters(Delimiters.NewLine))\n    let commadParts = command.split(\"=\")\n\n    latestCommands[commadParts[0]] = parseFloat(commadParts[1])\n})\n\nfunction updateLeds() {\n    if (lightsOn) {\n        // wuKong.lightIntensity(1)\n        // wuKong.setLightMode(wuKong.LightMode.BREATH)\n        strip.setPixelColor(2, 0xFFFFF)\n        strip.setPixelColor(3, 0xFFFFF)\n    } else {\n        // wuKong.setLightMode(wuKong.LightMode.OFF)\n        // wuKong.lightIntensity(0)\n        strip.setPixelColor(2, 0)\n        strip.setPixelColor(3, 0)\n        strip.show()\n    }\n\n    strip.show()\n}\n\nfunction setLeds(brightness = 0, color = 0xFFFFF) {\n    if (brightness) {\n        strip.setBrightness(brightness)\n        strip.setPixelColor(2, color)\n        strip.setPixelColor(3, color)\n    } else {\n        strip.setPixelColor(2, 0)\n        strip.setPixelColor(3, 0)\n        strip.show()\n    }\n\n    strip.show()\n\n    return brightness\n}\n\nfunction setBrightness(brightness: number, buttonNr: number) {\n    const buttonBrightness: { [key: number]: number } = {\n        20: 4,\n        100: 7,\n        255: 8,\n    };\n\n    if (lightsBrightnessLevel == brightness) {\n        lightsBrightnessLevel = setLeds(0)\n        bluetooth.uartWriteLine(`vc;b;${buttonNr};1;0;`)\n    } else {\n        if (lightsBrightnessLevel) {\n            bluetooth.uartWriteLine(`vc;b;${buttonBrightness[lightsBrightnessLevel]};1;0;`)\n        }\n        lightsBrightnessLevel = setLeds(brightness)\n        bluetooth.uartWriteLine(`vc;b;${buttonNr};1;1;`)\n    }\n}\n\nfunction turnLift(direction: number) {\n    while (liftPressed) {\n        if ((liftAngle > minLiftAngle && direction < 0) || (liftAngle < maxLiftAngle && direction > 0)) {\n            liftAngle = liftAngleStep * direction + liftAngle\n\n            wuKong.setServoAngle(wuKong.ServoTypeList._360, wuKong.ServoList.S3, liftAngle)\n            basic.pause(10)\n        } else {\n            break;\n        }\n    }\n}","README.md":"","pxt.json":"{\n    \"name\": \"micro:car 7.1.47\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"microphone\": \"*\",\n        \"bluetooth\": \"*\",\n        \"wuKong\": \"github:elecfreaks/pxt-wukong#v1.5.8\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"languageRestriction\": \"javascript-only\",\n    \"yotta\": {\n        \"config\": {\n            \"microbit-dal\": {\n                \"bluetooth\": {\n                    \"open\": 1,\n                    \"whitelist\": 0,\n                    \"security_level\": null\n                }\n            }\n        }\n    }\n}\n"}},{"timestamp":1759645871495,"editorVersion":"7.1.47","text":{"main.ts":"let latestCommands: { [key: string]: number } = {}\nlet lightsOn = false;\nlet lightsBrightness = false;\nlet lightsBrightnessLevel = 0;\nlet strip = neopixel.create(DigitalPin.P16, 4, NeoPixelMode.RGB)\nlet acc: number[];\nlet alarmActive = false;\nlet oyEnabled = false;\nlet maxLiftAngle = 320;\nlet minLiftAngle = 230;\nlet liftPressed = false;\nlet liftAngle = minLiftAngle;\nlet liftAngleStep = 1;\nlet maxSteeringAngle = 90;\n\nmusic.setVolume(20) // 127\nbasic.clearScreen()\nstrip.setBrightness(20)\n\nbluetooth.startUartService()\n\nbluetooth.onBluetoothConnected(function () {\n})\n\nbluetooth.onBluetoothDisconnected(function () {\n    stopAll()\n})\n\nbluetooth.onUartDataReceived(serial.delimiters(Delimiters.NewLine), function () {\n    let command = bluetooth.uartReadUntil(serial.delimiters(Delimiters.NewLine))\n    let commadParts = command.split(\"=\")\n    latestCommands[commadParts[0]] = parseFloat(commadParts[1])\n})\n\nbasic.forever(function () {\n    while (Object.keys(latestCommands).length) {\n        let commandName = Object.keys(latestCommands)[0]\n        let commandValue = latestCommands[commandName]\n        delete latestCommands[commandName];\n\n        if (commandName == \"-v\") {\n            bluetooth.uartWriteLine('vc;import_start;')\n            bluetooth.uartWriteLine('vc;init;')\n            bluetooth.uartWriteLine('vc;sl;1;-100;100;5;1;0;1;;')\n            bluetooth.uartWriteLine(`vc;sr;1;-${maxSteeringAngle};${maxSteeringAngle};10;0;0;0;;`)\n            bluetooth.uartWriteLine(`vc;jrx;-${maxSteeringAngle};${maxSteeringAngle};10;0;0;`)\n            bluetooth.uartWriteLine('vc;jry;-100;100;5;1;0;')\n            bluetooth.uartWriteLine('vc;b;w;1;0;<i class=\"fa-solid fa-arrows-up-down\"></i>;')\n            bluetooth.uartWriteLine('vc;b;a;0;0;A;')\n            bluetooth.uartWriteLine('vc;b;d;0;0;D;')\n            bluetooth.uartWriteLine('vc;b;s;0;0;S;')\n            bluetooth.uartWriteLine('vc;b;2;0;')\n            bluetooth.uartWriteLine('vc;b;3;0;')\n            bluetooth.uartWriteLine('vc;b;up;1;2;<i class=\"fa-solid fa-arrow-up\"></i>;')\n            bluetooth.uartWriteLine('vc;b;left;0;0;<i class=\"fa-solid fa-arrow-left\"></i>;')\n            bluetooth.uartWriteLine('vc;b;right;0;0;<i class=\"fa-solid fa-arrow-right\"></i>;')\n            bluetooth.uartWriteLine('vc;b;down;1;2;<i class=\"fa-solid fa-arrow-down\"></i>;')\n            bluetooth.uartWriteLine('vc;b;1;1;4;<i class=\"fa-solid fa-volume-high\"></i>;')\n            bluetooth.uartWriteLine('vc;b;2;1;1;<i class=\"fa-solid fa-lock-open\"></i>;')\n            bluetooth.uartWriteLine('vc;b;4;1;0;<i class=\"fa-regular fa-lightbulb\"></i>;')\n            bluetooth.uartWriteLine('vc;b;7;1;0;<i class=\"fa-solid fa-lightbulb\"></i>;')\n            bluetooth.uartWriteLine('vc;b;8;1;0;<i class=\"fa-solid fa-sun\"></i>;')\n            bluetooth.uartWriteLine(`vc;ox;1;-30;30;-${maxSteeringAngle};${maxSteeringAngle};10;0;0;`)\n            bluetooth.uartWriteLine('vc;oy;1;-30;30;-100;100;5;0;0;')\n            bluetooth.uartWriteLine('vc;show;sl,sr,jr,al,ar,br,bl;')\n            bluetooth.uartWriteLine('vc;il;1;')\n            bluetooth.uartWriteLine('vc;ir;1;')\n\n            stopAll()\n\n            if (!alarmActive) {\n                bluetooth.uartWriteLine('vc;b;2;1;1;<i class=\"fa-solid fa-lock-open\"></i>;')\n            } else {\n                bluetooth.uartWriteLine('vc;b;2;1;4;<i class=\"fa-solid fa-lock\"></i>;')\n            }\n\n            bluetooth.uartWriteLine('vc;m;micro:car;')\n            bluetooth.uartWriteLine('vc;import_end;')\n\n            bluetooth.uartWriteLine('getProp;mc_a;')\n\n            wuKong.setServoAngle(wuKong.ServoTypeList._360, wuKong.ServoList.S3, liftAngle)\n        } else if (commandName == \"STOP\" || commandName == \"PLAY_DONE\") {\n            stopAll()\n        } else if (commandName == \"2\") {\n            alarmActive = !alarmActive\n            if (alarmActive) {\n                activateAlarm()\n                bluetooth.uartWriteLine('vc;b;2;1;4;<i class=\"fa-solid fa-lock\"></i>;')\n                bluetooth.uartWriteLine('setProp;mc_a;1')\n            } else {\n                bluetooth.uartWriteLine('vc;b;2;1;1;<i class=\"fa-solid fa-lock-open\"></i>;')\n                bluetooth.uartWriteLine('setProp;mc_a;0')\n            }\n        } else if (alarmActive) {\n            return\n        } else if ((oyEnabled && commandName == \"oy\") || commandName == \"sl\" || commandName == \"jry\") {\n            wuKong.setServoSpeed(wuKong.ServoList.S7, commandValue)\n        } else if (commandName == \"ox\" || commandName == \"sr\" || commandName == \"jrx\") {\n            let value = commandValue + 180;\n            // if (value >= 120 && value <= 240) {\n            if (value >= 90 && value <= 270) {\n                wuKong.setServoAngle(wuKong.ServoTypeList._360, wuKong.ServoList.S0, value)\n            }\n        } else if (commandName == \"1\") {\n            // Horn on\n            music.ringTone(Note.C)\n        } else if (commandName == \"!1\") {\n            // Horn off\n            music.stopAllSounds()\n        } else if (commandName == \"4\") {\n            setBrightness(20)\n        } else if (commandName == \"7\") {\n            setBrightness(100)\n        } else if (commandName == \"8\") {\n            setBrightness(255)\n        } else if (commandName == \"w\") {\n            oyEnabled = true\n        } else if (commandName == \"!w\") {\n            oyEnabled = false\n            wuKong.setServoSpeed(wuKong.ServoList.S7, 0)\n        } else if (commandName == \"up\" && !liftPressed) {\n            liftPressed = true\n            control.inBackground(() => {\n                turnLift(-1)\n            })\n        } else if (commandName == \"!up\") {\n            liftPressed = false\n        } else if (commandName == \"down\" && !liftPressed) {\n            liftPressed = true\n            control.inBackground(() => {\n                turnLift(1)\n            })\n        } else if (commandName == \"!down\") {\n            liftPressed = false\n        } else if (commandName == \"prop;mc_a;1\") {\n            activateAlarm()\n        }\n    }\n\n    basic.pause(20)\n})\n\nfunction activateAlarm() {\n    let sensitiveness = [\n        100,\n        100,\n        120\n    ];\n\n    stopAll()\n\n    alarmActive = true;\n\n    acc = [\n        input.acceleration(Dimension.X),\n        input.acceleration(Dimension.Y),\n        input.acceleration(Dimension.Z)\n    ]\n\n    control.inBackground(() => {\n        while (alarmActive) {\n            let accTest = [\n                input.acceleration(Dimension.X),\n                input.acceleration(Dimension.Y),\n                input.acceleration(Dimension.Z)\n            ]\n\n            let test = false;\n\n            for (let n = 0; n < 3; n++) {\n                if (Math.abs(accTest[n] - acc[n]) > sensitiveness[n]) {\n                    test = true;\n                    break;\n                }\n            }\n\n            if (test) {\n                runAlarm()\n                break;\n            }\n\n            basic.pause(50)\n        }\n    })\n}\n\nfunction runAlarm() {\n    control.inBackground(() => {\n        let time = input.runningTime()\n\n        while (alarmActive && (input.runningTime() - time < 3000)) {\n            music.ringTone(Note.C)\n            // setLeds(20)\n\n            basic.pause(200)\n\n            music.stopAllSounds()\n            // setLeds(0)\n\n            basic.pause(200)\n        }\n\n        if (alarmActive) {\n            activateAlarm()\n        }\n    })\n}\n\nfunction stopAll() {\n    wuKong.setServoSpeed(wuKong.ServoList.S7, 0)\n    wuKong.setServoAngle(wuKong.ServoTypeList._360, wuKong.ServoList.S0, 180)\n    music.stopAllSounds()\n    lightsOn = false\n    lightsBrightness = false\n    lightsBrightnessLevel = 0;\n    setLeds(0)\n\n    bluetooth.uartWriteLine('vc;b;4;1;0;')\n    bluetooth.uartWriteLine('vc;b;7;1;0;')\n    bluetooth.uartWriteLine('vc;b;8;1;0;')\n    bluetooth.uartWriteLine(`vc;sr;1;-${maxSteeringAngle};${maxSteeringAngle};10;0;0;0;;`)\n    bluetooth.uartWriteLine('vc;srv;0;')\n}\n\nfunction updateLeds() {\n    if (lightsOn) {\n        // wuKong.lightIntensity(1)\n        // wuKong.setLightMode(wuKong.LightMode.BREATH)\n        strip.setPixelColor(2, 0xFFFFF)\n        strip.setPixelColor(3, 0xFFFFF)\n    } else {\n        // wuKong.setLightMode(wuKong.LightMode.OFF)\n        // wuKong.lightIntensity(0)\n        strip.setPixelColor(2, 0)\n        strip.setPixelColor(3, 0)\n        strip.show()\n    }\n\n    strip.show()\n}\n\nfunction setLeds(brightness = 0, color = 0xFFFFF) {\n    if (brightness) {\n        strip.setBrightness(brightness)\n        strip.setPixelColor(2, color)\n        strip.setPixelColor(3, color)\n    } else {\n        strip.setPixelColor(2, 0)\n        strip.setPixelColor(3, 0)\n        strip.show()\n    }\n\n    strip.show()\n\n    return brightness\n}\n\nfunction setBrightness(brightness: number) {\n    const buttonBrightness: { [key: number]: number } = {\n        20: 4,\n        100: 7,\n        255: 8,\n    };\n\n    let buttonNr = buttonBrightness[lightsBrightnessLevel]\n\n    if (lightsBrightnessLevel == brightness) {\n        lightsBrightnessLevel = setLeds(0)\n        bluetooth.uartWriteLine(`vc;b;${buttonNr};1;0;`)\n    } else {\n        if (lightsBrightnessLevel) {\n            bluetooth.uartWriteLine(`vc;b;${buttonNr};1;0;`)\n        }\n        lightsBrightnessLevel = setLeds(brightness)\n        bluetooth.uartWriteLine(`vc;b;${buttonNr};1;1;`)\n    }\n}\n\nfunction turnLift(direction: number) {\n    while (liftPressed) {\n        if ((liftAngle > minLiftAngle && direction < 0) || (liftAngle < maxLiftAngle && direction > 0)) {\n            liftAngle = liftAngleStep * direction + liftAngle\n\n            wuKong.setServoAngle(wuKong.ServoTypeList._360, wuKong.ServoList.S3, liftAngle)\n            basic.pause(10)\n        } else {\n            break;\n        }\n    }\n}","README.md":"","pxt.json":"{\n    \"name\": \"micro:car 7.1.47\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"microphone\": \"*\",\n        \"bluetooth\": \"*\",\n        \"wuKong\": \"github:elecfreaks/pxt-wukong#v1.5.8\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"languageRestriction\": \"javascript-only\",\n    \"yotta\": {\n        \"config\": {\n            \"microbit-dal\": {\n                \"bluetooth\": {\n                    \"open\": 1,\n                    \"whitelist\": 0,\n                    \"security_level\": null\n                }\n            }\n        }\n    }\n}\n"}}],"shares":[],"lastSaveTime":1759645955272}